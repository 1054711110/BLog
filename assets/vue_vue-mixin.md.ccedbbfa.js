import{_ as s,c as n,o as a,a as l}from"./app.005fc0ed.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、mixin是什么","slug":"一、mixin是什么","link":"#一、mixin是什么","children":[{"level":3,"title":"Vue中的mixin","slug":"vue中的mixin","link":"#vue中的mixin","children":[]},{"level":3,"title":"局混入","slug":"局混入","link":"#局混入","children":[]},{"level":3,"title":"全局混入","slug":"全局混入","link":"#全局混入","children":[]},{"level":3,"title":"注意事项：","slug":"注意事项","link":"#注意事项","children":[]}]},{"level":2,"title":"二、使用场景","slug":"二、使用场景","link":"#二、使用场景","children":[]},{"level":2,"title":"三、源码分析","slug":"三、源码分析","link":"#三、源码分析","children":[{"level":3,"title":"替换型","slug":"替换型","link":"#替换型","children":[]},{"level":3,"title":"合型","slug":"合型","link":"#合型","children":[]},{"level":3,"title":"团队性质","slug":"团队性质","link":"#团队性质","children":[]},{"level":3,"title":"增加型","slug":"增加型","link":"#增加型","children":[]},{"level":3,"title":"小结：","slug":"小结","link":"#小结","children":[]}]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"relativePath":"vue/vue-mixin.md","lastUpdated":null}'),p={name:"vue/vue-mixin.md"},o=l(`<p><img src="https://camo.githubusercontent.com/c1bbfff93df90f6b255474fbef90a8fc11ed2d04b68ceb32aa5d81d332ddef5e/68747470733a2f2f7374617469632e7675652d6a732e636f6d2f38613733396339302d336237662d313165622d383566362d3666616337376330633962332e706e67" alt="image"></p><h2 id="一、mixin是什么" tabindex="-1">一、mixin是什么 <a class="header-anchor" href="#一、mixin是什么" aria-hidden="true">#</a></h2><p><code>Mixin</code>是面向象程序设计语言中的类，提供了方法的现实。其他类可以访问<code>mixin</code>类的方法而不一定成为其他类</p><p><code>Mixin</code>类通常为功能模块使用，在需要该功能时“混入”，有利于代号重复使用或免去很多继承的复合</p><h3 id="vue中的mixin" tabindex="-1">Vue中的mixin <a class="header-anchor" href="#vue中的mixin" aria-hidden="true">#</a></h3><p>先来看一下官方指定义</p><p><code>mixin</code>（混入），提供了一种非常灵活的方式，来解析<code>Vue</code>组件中的可复用功能。</p><p>本质其实就是一个<code>js</code>对象，它可以包含我们组中任意功能选项，如<code>data</code>、<code>components</code>、<code>methods </code>、<code>created</code>、<code>computed</code>等</p><p>我们只需要将共同使用的功能以对象的方式输入<code>mixins</code>选项中，当组使用<code>mixins</code>对象时所有<code>mixins</code>对象的选项都将被混合进入该组件本项的中</p><p>在<code>Vue</code>中我们可以<strong>局混入</strong>跟<strong>全局混入</strong></p><h3 id="局混入" tabindex="-1">局混入 <a class="header-anchor" href="#局混入" aria-hidden="true">#</a></h3><p>定义一个<code>mixin</code>对象，有组合<code>options</code>的<code>data</code>、<code>methods</code>属性</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">myMixin</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">created</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hello</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">hello</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;hello from mixin!&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#B392F0;"> myMixin </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  created</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> () {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.hello()</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  methods</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    hello</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> () {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&#39;hello from mixin!&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>组合件通过<code>mixins</code>属性调整<code>mixin</code>对比</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">component</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;componentA&#39;</span><span style="color:#ABB2BF;">,{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">mixins</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">myMixin</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">Vue</span><span style="color:#B392F0;">.component(</span><span style="color:#FFAB70;">&#39;componentA&#39;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;">{</span></span>
<span class="line"><span style="color:#B392F0;">  mixins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [myMixin]</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>该组合件在使用的时候，混合了<code>mixin</code>里面的方法，在自动执行<code>create</code>生命锁子，执行<code>hello</code>方法</p><h3 id="全局混入" tabindex="-1">全局混入 <a class="header-anchor" href="#全局混入" aria-hidden="true">#</a></h3><p>通过<code>Vue.mixin()</code>进入全面的混合进入</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mixin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">created</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;全局混入&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">Vue</span><span style="color:#B392F0;">.mixin({</span></span>
<span class="line"><span style="color:#B392F0;">  created</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> () {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#FFAB70;">&quot;全局混入&quot;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>使用全局混入需要特别注意，因为它会影响每个组实例（包括第三方组）</p><p>PS：全局混入常用于插件的编写</p><h3 id="注意事项" tabindex="-1">注意事项： <a class="header-anchor" href="#注意事项" aria-hidden="true">#</a></h3><p>当组存在于与<code>mixin</code>象相相同的选项的时候，进行递归并并的时组的选项会覆盖<code>mixin</code>的选项</p><p>但如果相同选项为生命周期锁子的时候，会合并成一个数组，先执行的<code>mixin</code>锁子，再执行组的锁子</p><h2 id="二、使用场景" tabindex="-1">二、使用场景 <a class="header-anchor" href="#二、使用场景" aria-hidden="true">#</a></h2><p>在日常的开发中，我们经常会遇到在不同的组中经常会需要使用到一些相同或相似的代码，这些代码的功能相对独立</p><p>此时，可以通过<code>Vue</code>的<code>mixin</code>功能将相同或类似的代码提交出来</p><p>举个例子</p><p>定义一个<code>modal</code>弹窗组，内部通过<code>isShowing</code>来控制显示</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Modal</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;#modal&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">isShowing</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">toggleShow</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isShowing</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isShowing</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Modal</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  template</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;#modal&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  data() {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      isShowing</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  methods</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    toggleShow() {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.isShowing </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.isShowing;</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>定义一个<code>tooltip</code>提示框，内部通过<code>isShowing</code>来控制显示</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Tooltip</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;#tooltip&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">isShowing</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">toggleShow</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isShowing</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isShowing</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Tooltip</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  template</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;#tooltip&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  data() {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      isShowing</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  methods</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    toggleShow() {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.isShowing </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.isShowing;</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>通过观察上面两个组合，发现两个人的发布是一致的，代号控制显示也是一致的，这时候<code>mixin</code>就派上用场了</p><p>先抽出共代号，编写一个<code>mixin</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">toggle</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">isShowing</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">toggleShow</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isShowing</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isShowing</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">toggle</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  data() {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      isShowing</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  methods</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    toggleShow() {</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.isShowing </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.isShowing;</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>两个组在使用上，只需要引入<code>mixin</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Modal</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;#modal&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">mixins</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">toggle</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Tooltip</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;#tooltip&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">mixins</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">toggle</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Modal</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  template</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;#modal&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  mixins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [toggle]</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"><span style="color:#B392F0;"> </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Tooltip</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  template</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;#tooltip&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  mixins</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [toggle]</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>通过上面小小的例子，让我们知道了<code>Mixin</code>对于封装一些可复用的功能如此有趣、方方便、实用</p><h2 id="三、源码分析" tabindex="-1">三、源码分析 <a class="header-anchor" href="#三、源码分析" aria-hidden="true">#</a></h2><p>首先从<code>Vue.mixin</code>入手</p><p>源码位置：/src/core/global-api/mixin.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">initMixin</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">Vue</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">GlobalAPI</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mixin</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">mixin</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mergeOptions</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">mixin</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> initMixin (Vue</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> GlobalAPI) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">Vue</span><span style="color:#B392F0;">.mixin </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (mixin</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Object) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.options </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> mergeOptions(</span><span style="color:#79B8FF;">this</span><span style="color:#B392F0;">.options</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> mixin)</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">this</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>主要是调用<code>merOptions</code>方法</p><p>源代码位置：/src/core/util/options.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mergeOptions</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">parent</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">child</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">vm</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Component</span></span>
<span class="line"><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">child</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mixins</span><span style="color:#ABB2BF;">) { </span><span style="color:#7F848E;font-style:italic;">// 判断有没有mixin 也就是mixin里面挂mixin的情况 有的话递归进行合并</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">l</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">child</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">mixins</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">l</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">parent</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mergeOptions</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parent</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">child</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mixins</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {} </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">key</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">parent</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">mergeField</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 先遍历parent的key 调对应的strats[XXX]方法进行合并</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">hasOwn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parent</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">)) { </span><span style="color:#7F848E;font-style:italic;">// 如果parent已经处理过某个key 就不处理了</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">mergeField</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 处理child中的key 也就parent中没有处理过的key</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mergeField</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">strat</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">strats</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">defaultStrat</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">strat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parent</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 根据不同类型的options调用strats中不同的方法进行合并</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">options</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> mergeOptions (</span></span>
<span class="line"><span style="color:#B392F0;">  parent</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Object</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  child</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Object</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  vm</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> Component</span></span>
<span class="line"><span style="color:#B392F0;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Object {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#79B8FF;">child</span><span style="color:#B392F0;">.mixins) { </span><span style="color:#6B737C;">// 判断有没有mixin 也就是mixin里面挂mixin的情况 有的话递归进行合并</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">for</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> i </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> l </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">child</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">mixins</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">length</span><span style="color:#B392F0;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;"> l; i</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">    parent </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> mergeOptions(parent</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">child</span><span style="color:#B392F0;">.mixins[i]</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> vm)</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">options</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {} </span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">let</span><span style="color:#B392F0;"> key</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">for</span><span style="color:#B392F0;"> (key </span><span style="color:#F97583;">in</span><span style="color:#B392F0;"> parent) {</span></span>
<span class="line"><span style="color:#B392F0;">    mergeField(key) </span><span style="color:#6B737C;">// 先遍历parent的key 调对应的strats[XXX]方法进行合并</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">for</span><span style="color:#B392F0;"> (key </span><span style="color:#F97583;">in</span><span style="color:#B392F0;"> child) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">hasOwn(parent</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> key)) { </span><span style="color:#6B737C;">// 如果parent已经处理过某个key 就不处理了</span></span>
<span class="line"><span style="color:#B392F0;">      mergeField(key) </span><span style="color:#6B737C;">// 处理child中的key 也就parent中没有处理过的key</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> mergeField (key) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">strat</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> strats[key] </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> defaultStrat</span></span>
<span class="line"><span style="color:#B392F0;">    options[key] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> strat(parent[key]</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> child[key]</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> vm</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> key) </span><span style="color:#6B737C;">// 根据不同类型的options调用strats中不同的方法进行合并</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> options</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>从上面的源码，我们得到以下几点：</p><ul><li>优先递归处理<code>mixins</code></li><li>先遍历并<code>parent</code>中的<code>key</code>，调用<code>mergeField</code>方法进行并，然后保存在变量中<code>options</code></li><li>再遍历<code>child</code>，合并并补上<code>parent</code>中没有的<code>key</code>，调整使用<code>mergeField</code>方法进行合并，保存在变化量<code>options</code></li><li>通过<code>mergeField</code>任意数进行了合并</li></ul><p>下面是关于<code>Vue</code>的几种类型的策略策略</p><ul><li>替换型</li><li>合型</li><li>队型</li><li>增加型</li></ul><h3 id="替换型" tabindex="-1">替换型 <a class="header-anchor" href="#替换型" aria-hidden="true">#</a></h3><p>替换型合并有<code>props</code>、<code>methods</code>、<code>inject</code>、<code>computed</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">strats</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#E5C07B;">strats</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#E5C07B;">strats</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">inject</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#E5C07B;">strats</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">computed</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">parentVal</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">childVal</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">vm</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">): </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">parentVal</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">childVal</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 如果parentVal没有值，直接返回childVal</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ret</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 创建一个第三方对象 ret</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">extend</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ret</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parentVal</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// extend方法实际是把parentVal的属性复制到ret中</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">childVal</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">extend</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ret</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">childVal</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 把childVal的属性复制到ret中</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">ret</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">strats</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">provide</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">mergeDataOrFn</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">strats</span><span style="color:#B392F0;">.props </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#79B8FF;">strats</span><span style="color:#B392F0;">.methods </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#79B8FF;">strats</span><span style="color:#B392F0;">.inject </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#79B8FF;">strats</span><span style="color:#B392F0;">.computed </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> (</span></span>
<span class="line"><span style="color:#B392F0;">  parentVal</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">?</span><span style="color:#B392F0;">Object</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  childVal</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">?</span><span style="color:#B392F0;">Object</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  vm</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> Component</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  key</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">string</span></span>
<span class="line"><span style="color:#B392F0;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">?</span><span style="color:#B392F0;">Object {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">parentVal) </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> childVal </span><span style="color:#6B737C;">// 如果parentVal没有值，直接返回childVal</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">ret</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.create(</span><span style="color:#79B8FF;">null</span><span style="color:#B392F0;">) </span><span style="color:#6B737C;">// 创建一个第三方对象 ret</span></span>
<span class="line"><span style="color:#B392F0;">  extend(ret</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> parentVal) </span><span style="color:#6B737C;">// extend方法实际是把parentVal的属性复制到ret中</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (childVal) extend(ret</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> childVal) </span><span style="color:#6B737C;">// 把childVal的属性复制到ret中</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> ret</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#79B8FF;">strats</span><span style="color:#B392F0;">.provide </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> mergeDataOrFn</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>同名的<code>props</code>、<code>methods</code>、<code>inject</code>、<code>computed</code>会被后人代替</p><h3 id="合型" tabindex="-1">合型 <a class="header-anchor" href="#合型" aria-hidden="true">#</a></h3><p>和并型并有：<code>data</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">strats</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">data</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">parentVal</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">childVal</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">vm</span><span style="color:#ABB2BF;">) {    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mergeDataOrFn</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">parentVal</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">childVal</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vm</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mergeDataOrFn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">parentVal</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">childVal</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">vm</span><span style="color:#ABB2BF;">) {    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mergedInstanceDataFn</span><span style="color:#ABB2BF;">() {        </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">childData</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">childVal</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 执行data挂的函数得到对象</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">parentData</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">parentVal</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">)        </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">childData</span><span style="color:#ABB2BF;">) {            </span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mergeData</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">childData</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parentData</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 将2个对象进行合并                                 </span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {            </span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">parentData</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 如果没有childData 直接返回parentData</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mergeData</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">) {    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">toVal</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fromVal</span><span style="color:#ABB2BF;">;    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">keys</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">);   </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">keys</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">keys</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">toVal</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">fromVal</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];    </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 如果不存在这个属性，就重新设置</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasOwnProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fromVal</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }      </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 存在相同属性，合并对象</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">toVal</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#98C379;">&quot;object&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">fromVal</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#98C379;">&quot;object&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">mergeData</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">toVal</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fromVal</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">to</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">strats</span><span style="color:#B392F0;">.data </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;">(parentVal</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> childVal</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> vm) {    </span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> mergeDataOrFn(</span></span>
<span class="line"><span style="color:#B392F0;">        parentVal</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> childVal</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> vm</span></span>
<span class="line"><span style="color:#B392F0;">    )</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> mergeDataOrFn(parentVal</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> childVal</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> vm) {    </span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> mergedInstanceDataFn() {        </span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">var</span><span style="color:#B392F0;"> childData </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">childVal</span><span style="color:#B392F0;">.call(vm</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> vm) </span><span style="color:#6B737C;">// 执行data挂的函数得到对象</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">var</span><span style="color:#B392F0;"> parentData </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">parentVal</span><span style="color:#B392F0;">.call(vm</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> vm)        </span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (childData) {            </span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> mergeData(childData</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> parentData) </span><span style="color:#6B737C;">// 将2个对象进行合并                                 </span></span>
<span class="line"><span style="color:#B392F0;">        } </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> {            </span></span>
<span class="line"><span style="color:#B392F0;">            </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> parentData </span><span style="color:#6B737C;">// 如果没有childData 直接返回parentData</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> mergeData(to</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> from) {    </span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">from) </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> to    </span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">var</span><span style="color:#B392F0;"> key</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> toVal</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> fromVal;    </span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">var</span><span style="color:#B392F0;"> keys </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.keys(from);   </span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">for</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">var</span><span style="color:#B392F0;"> i </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F8F8F8;">0</span><span style="color:#B392F0;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">keys</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">length</span><span style="color:#B392F0;">; i</span><span style="color:#F97583;">++</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">        key </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> keys[i];</span></span>
<span class="line"><span style="color:#B392F0;">        toVal </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> to[key];</span></span>
<span class="line"><span style="color:#B392F0;">        fromVal </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> from[key];    </span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 如果不存在这个属性，就重新设置</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">to</span><span style="color:#B392F0;">.hasOwnProperty(key)) {</span></span>
<span class="line"><span style="color:#B392F0;">            set(to</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> key</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> fromVal);</span></span>
<span class="line"><span style="color:#B392F0;">        }      </span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#6B737C;">// 存在相同属性，合并对象</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">else</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#B392F0;"> toVal </span><span style="color:#F97583;">==</span><span style="color:#FFAB70;">&quot;object&quot;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">typeof</span><span style="color:#B392F0;"> fromVal </span><span style="color:#F97583;">==</span><span style="color:#FFAB70;">&quot;object&quot;</span><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">            mergeData(toVal</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> fromVal);</span></span>
<span class="line"><span style="color:#B392F0;">        }</span></span>
<span class="line"><span style="color:#B392F0;">    }    </span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> to</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p><code>mergeData</code>函数遍历了要合并的数据的所有属性，然后根据不同情况进行合并：</p><ul><li>当目标数据对象不包含当前属性时，调使用<code>set</code>方法进行合并（设置方法其实际就是一些合并并重新赋值的方法）</li><li>当目标数据对象包包含当前属性和当前值为纯对象时，递归并同时对象值，这样做是为了防止对象存入新类</li></ul><h3 id="团队性质" tabindex="-1">团队性质 <a class="header-anchor" href="#团队性质" aria-hidden="true">#</a></h3><p>团队性质并有：全部生命周期和<code>watch</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mergeHook</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">parentVal</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">childVal</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;"> | </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Function</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">childVal</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">parentVal</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">parentVal</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">childVal</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      : </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">childVal</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">childVal</span></span>
<span class="line"><span style="color:#ABB2BF;">        : [</span><span style="color:#E5C07B;">childVal</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">    : </span><span style="color:#E5C07B;">parentVal</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">LIFECYCLE_HOOKS</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">hook</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  strats[</span><span style="color:#E06C75;">hook</span><span style="color:#ABB2BF;">]</span><span style="color:#E06C75;"> = mergeHook</span></span>
<span class="line"><span style="color:#E06C75;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// watch</span></span>
<span class="line"><span style="color:#E06C75;">strats.watch = function (</span></span>
<span class="line"><span style="color:#E06C75;">  parentVal,</span></span>
<span class="line"><span style="color:#E06C75;">  childVal,</span></span>
<span class="line"><span style="color:#E06C75;">  vm,</span></span>
<span class="line"><span style="color:#E06C75;">  key</span></span>
<span class="line"><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#7F848E;font-style:italic;">// work around Firefox&#39;s Object.prototype.watch...</span></span>
<span class="line"><span style="color:#E06C75;">  if (parentVal === nativeWatch) { parentVal = undefined; }</span></span>
<span class="line"><span style="color:#E06C75;">  if (childVal === nativeWatch) { childVal = undefined; }</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#7F848E;font-style:italic;">/* istanbul ignore if */</span></span>
<span class="line"><span style="color:#E06C75;">  if (!childVal) { return Object.create(parentVal || null) }</span></span>
<span class="line"><span style="color:#E06C75;">  {</span></span>
<span class="line"><span style="color:#E06C75;">    assertObjectType(key, childVal, vm);</span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span>
<span class="line"><span style="color:#E06C75;">  if (!parentVal) { return childVal }</span></span>
<span class="line"><span style="color:#E06C75;">  var ret = {};</span></span>
<span class="line"><span style="color:#E06C75;">  extend(ret, parentVal);</span></span>
<span class="line"><span style="color:#E06C75;">  for (var key$1 in childVal) {</span></span>
<span class="line"><span style="color:#E06C75;">    var parent = ret</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key$1</span><span style="color:#ABB2BF;">]</span><span style="color:#E06C75;">;</span></span>
<span class="line"><span style="color:#E06C75;">    var child = childVal</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key$1</span><span style="color:#ABB2BF;">]</span><span style="color:#E06C75;">;</span></span>
<span class="line"><span style="color:#E06C75;">    if (parent &amp;&amp; !Array.isArray(parent)) {</span></span>
<span class="line"><span style="color:#E06C75;">      parent = </span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">parent</span><span style="color:#ABB2BF;">]</span><span style="color:#E06C75;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    ret</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key$1</span><span style="color:#ABB2BF;">]</span><span style="color:#E06C75;"> = parent</span></span>
<span class="line"><span style="color:#E06C75;">      ? parent.concat(child)</span></span>
<span class="line"><span style="color:#E06C75;">      </span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">ret</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> mergeHook (</span></span>
<span class="line"><span style="color:#B392F0;">  parentVal</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">?</span><span style="color:#B392F0;">Array&lt;Function</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  childVal</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">?</span><span style="color:#B392F0;">Function </span><span style="color:#F97583;">|</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">?</span><span style="color:#B392F0;">Array&lt;Function</span></span>
<span class="line"><span style="color:#B392F0;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">?</span><span style="color:#B392F0;">Array&lt;Function {</span></span>
<span class="line"><span style="color:#B392F0;">  return childVal</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> parentVal</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> parentVal.concat(childVal)</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Array.isArray(childVal)</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> childVal</span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [childVal]</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> parentVal</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">LIFECYCLE_HOOKS.forEach(hook </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  strats[hook] = mergeHook</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">// watch</span></span>
<span class="line"><span style="color:#B392F0;">strats.watch = function (</span></span>
<span class="line"><span style="color:#B392F0;">  parentVal,</span></span>
<span class="line"><span style="color:#B392F0;">  childVal,</span></span>
<span class="line"><span style="color:#B392F0;">  vm,</span></span>
<span class="line"><span style="color:#B392F0;">  key</span></span>
<span class="line"><span style="color:#B392F0;">) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// work around Firefox&#39;s Object.prototype.watch...</span></span>
<span class="line"><span style="color:#B392F0;">  if (parentVal === nativeWatch) { parentVal = undefined; }</span></span>
<span class="line"><span style="color:#B392F0;">  if (childVal === nativeWatch) { childVal = undefined; }</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">/* istanbul ignore if */</span></span>
<span class="line"><span style="color:#B392F0;">  if (!childVal) { return Object.create(parentVal || null) }</span></span>
<span class="line"><span style="color:#B392F0;">  {</span></span>
<span class="line"><span style="color:#B392F0;">    assertObjectType(key, childVal, vm);</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  if (!parentVal) { return childVal }</span></span>
<span class="line"><span style="color:#B392F0;">  var ret = {};</span></span>
<span class="line"><span style="color:#B392F0;">  extend(ret, parentVal);</span></span>
<span class="line"><span style="color:#B392F0;">  for (var key$1 in childVal) {</span></span>
<span class="line"><span style="color:#B392F0;">    var parent = ret[key$1];</span></span>
<span class="line"><span style="color:#B392F0;">    var child = childVal[key$1];</span></span>
<span class="line"><span style="color:#B392F0;">    if (parent &amp;&amp; !Array.isArray(parent)) {</span></span>
<span class="line"><span style="color:#B392F0;">      parent = [parent];</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">    ret[key$1] = parent</span></span>
<span class="line"><span style="color:#B392F0;">      ? parent.concat(child)</span></span>
<span class="line"><span style="color:#B392F0;">      </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#B392F0;">.isArray(child) </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> child </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> [child];</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  return ret</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><p>生命周周期锁子和<code>watch</code>被合并为一个数组，然后正确顺序遍历一次执行</p><h3 id="增加型" tabindex="-1">增加型 <a class="header-anchor" href="#增加型" aria-hidden="true">#</a></h3><p>叠加型并有：<code>component</code>、<code>directives</code>、<code>filters</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#E5C07B;">strats</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">components</span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#E5C07B;">strats</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">directives</span><span style="color:#56B6C2;">=</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">strats</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filters</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mergeAssets</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;font-style:italic;">parentVal</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">childVal</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span></span>
<span class="line"><span style="color:#ABB2BF;">) {    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parentVal</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">childVal</span><span style="color:#ABB2BF;">) { </span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">childVal</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">childVal</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">        }   </span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">res</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#79B8FF;">strats</span><span style="color:#B392F0;">.components</span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#79B8FF;">strats</span><span style="color:#B392F0;">.directives</span><span style="color:#F97583;">=</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">strats</span><span style="color:#B392F0;">.filters </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">function</span><span style="color:#B392F0;"> mergeAssets(</span></span>
<span class="line"><span style="color:#B392F0;">    parentVal</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> childVal</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> vm</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> key</span></span>
<span class="line"><span style="color:#B392F0;">) {    </span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">var</span><span style="color:#B392F0;"> res </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.create(parentVal </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">null</span><span style="color:#B392F0;">);    </span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">if</span><span style="color:#B392F0;"> (childVal) { </span></span>
<span class="line"><span style="color:#B392F0;">        </span><span style="color:#F97583;">for</span><span style="color:#B392F0;"> (</span><span style="color:#F97583;">var</span><span style="color:#B392F0;"> key </span><span style="color:#F97583;">in</span><span style="color:#B392F0;"> childVal) {</span></span>
<span class="line"><span style="color:#B392F0;">            res[key] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> childVal[key];</span></span>
<span class="line"><span style="color:#B392F0;">        }   </span></span>
<span class="line"><span style="color:#B392F0;">    } </span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#F97583;">return</span><span style="color:#B392F0;"> res</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>叠加型主要是通过原始型链进入行层的叠加</p><h3 id="小结" tabindex="-1">小结： <a class="header-anchor" href="#小结" aria-hidden="true">#</a></h3><ul><li>替换模型策略有<code>props</code>、<code>methods</code>、<code>inject</code>、<code>computed</code>，就是将新的同名参数替换旧的参数</li><li>合并型策略是<code>data</code>, 通过<code>set</code>方法进行合并和重新赋值</li><li>队列型策略有生命周期函数和<code>watch</code>，原理是将函数存入一个数组，然后正序遍历依次执行</li><li>叠加型有<code>component</code>、<code>directives</code>、<code>filters</code>，通过原型链进行层层的叠加</li></ul><h2 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-hidden="true">#</a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/31018570" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/31018570</a></li><li><a href="https://juejin.cn/post/6844904015495446536#heading-1" target="_blank" rel="noreferrer">https://juejin.cn/post/6844904015495446536#heading-1</a></li><li><a href="https://juejin.cn/post/6844903846775357453" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903846775357453</a></li><li><a href="https://vue3js.cn/docs/zh" target="_blank" rel="noreferrer">https://vue3js.cn/docs/zh</a></li></ul>`,70),e=[o];function c(r,t,B,y,i,F){return a(),n("div",null,e)}const b=s(p,[["render",c]]);export{A as __pageData,b as default};
